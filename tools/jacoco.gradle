tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReportGeneral(type: JacocoReport) {
    group 'Reporting'
    description 'Run tests and generate coverage report for instrumented and jvm testes'
    dependsOn 'testDebugUnitTest'
    //dependsOn 'createDebugCoverageReport'

    reports {
        xml.enabled = true
        xml.destination = file("${rootProject.buildDir}/reports/${project.name}/jacocoTestReport.xml")
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            '**/*Entity*.*',
            'android/**/*.*',
            '**/di/**'
    ]

    def javaTree = fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: fileFilter)

    def kotlinTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    classDirectories.from += files([javaTree], [kotlinTree])
    def coverageSourceDirs = [
            "src/main/kotlin"
    ]
    additionalSourceDirs.from += files(coverageSourceDirs)
    sourceDirectories.from += files(coverageSourceDirs)

    executionData.from += fileTree(dir: "$buildDir", includes: [
            "jacoco/*.exec",
            "outputs/code_coverage/**/connected/*.ec",
            "tmp/tests/*.exec",
            "tmp/tests/*.ec",
    ])

    doLast {
        println "Jacoco report has been generated to file://${reports.xml.destination}"
    }
}
